{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const fetchAll = useCallback(async () => {\n    if (!hasMore) return;\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        setHasMore(false); // Stop fetching if no response\n        return previousResponse;\n      }\n      if (previousResponse === null) {\n        return response;\n      }\n      const combinedData = [...previousResponse.data, ...response.data];\n      if (response.nextPage === null || response.data.length === 0) {\n        setHasMore(false); // No more pages to load\n      }\n      return {\n        data: combinedData,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions, hasMore]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setHasMore(true);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    hasMore\n  };\n}\n_s(usePaginatedTransactions, \"b8ZHAsi2n8t3HpZg6LUK1WvtzQo=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","_s","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","hasMore","setHasMore","fetchAll","response","page","nextPage","previousResponse","combinedData","data","length","invalidateData"],"sources":["C:/Users/waltw/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n  const [hasMore, setHasMore] = useState(true);\n\n  const fetchAll = useCallback(async () => {\n    if (!hasMore) return;\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    );\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        setHasMore(false); // Stop fetching if no response\n        return previousResponse;\n      }\n\n      if (previousResponse === null) {\n        return response;\n      }\n\n      const combinedData = [...previousResponse.data, ...response.data];\n      if (response.nextPage === null || response.data.length === 0) {\n        setHasMore(false); // No more pages to load\n      }\n\n      return { data: combinedData, nextPage: response.nextPage };\n    });\n  }, [fetchWithCache, paginatedTransactions, hasMore]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setHasMore(true);\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, hasMore };\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,wBAAwBA,CAAA,EAAgC;EAAAC,EAAA;EACtE,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGP,QAAQ,CAA0C,IAAI,CAAC;EACjH,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMU,QAAQ,GAAGX,WAAW,CAAC,YAAY;IACvC,IAAI,CAACS,OAAO,EAAE;IAEd,MAAMG,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBAAuB,EACvB;MACEQ,IAAI,EAAEN,qBAAqB,KAAK,IAAI,GAAG,CAAC,GAAGA,qBAAqB,CAACO;IACnE,CACF,CAAC;IAEDN,wBAAwB,CAAEO,gBAAgB,IAAK;MAC7C,IAAIH,QAAQ,KAAK,IAAI,EAAE;QACrBF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACnB,OAAOK,gBAAgB;MACzB;MAEA,IAAIA,gBAAgB,KAAK,IAAI,EAAE;QAC7B,OAAOH,QAAQ;MACjB;MAEA,MAAMI,YAAY,GAAG,CAAC,GAAGD,gBAAgB,CAACE,IAAI,EAAE,GAAGL,QAAQ,CAACK,IAAI,CAAC;MACjE,IAAIL,QAAQ,CAACE,QAAQ,KAAK,IAAI,IAAIF,QAAQ,CAACK,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QAC5DR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;MAEA,OAAO;QAAEO,IAAI,EAAED,YAAY;QAAEF,QAAQ,EAAEF,QAAQ,CAACE;MAAS,CAAC;IAC5D,CAAC,CAAC;EACJ,CAAC,EAAE,CAACT,cAAc,EAAEE,qBAAqB,EAAEE,OAAO,CAAC,CAAC;EAEpD,MAAMU,cAAc,GAAGnB,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAI,CAAC;IAC9BE,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEO,IAAI,EAAEV,qBAAqB;IAAED,OAAO;IAAEK,QAAQ;IAAEQ,cAAc;IAAEV;EAAQ,CAAC;AACpF;AAACL,EAAA,CAxCeD,wBAAwB;EAAA,QACFD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}