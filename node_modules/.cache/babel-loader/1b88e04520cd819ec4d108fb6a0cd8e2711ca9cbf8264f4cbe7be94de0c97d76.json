{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactions, setTransactions] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextPage, setNextPage] = useState(0);\n  const fetchById = useCallback(async employeeId => {\n    if (!hasMore) return; // Prevent fetching if no more data is available\n\n    const response = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId,\n      page: nextPage\n    });\n    setTransactions(prevTransactions => {\n      if (response === null || response.length === 0) {\n        setHasMore(false); // No more transactions to load\n        return prevTransactions;\n      }\n      setNextPage(prevPage => prevPage + 1); // Increment the page number for the next fetch\n      return [...(prevTransactions || []), ...response];\n    });\n    if ((response === null || response === void 0 ? void 0 : response.length) === 0) {\n      setHasMore(false); // No more transactions to load\n    }\n  }, [fetchWithCache, hasMore, nextPage]);\n  const invalidateData = useCallback(() => {\n    setTransactions(null);\n    setHasMore(true);\n    setNextPage(0); // Reset the page number when invalidating data\n  }, []);\n  return {\n    data: transactions,\n    loading,\n    fetchById,\n    invalidateData,\n    hasMore\n  };\n}\n_s(useTransactionsByEmployee, \"7o5HNW8PWfRCalZGRr+7Jau/TPE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","_s","fetchWithCache","loading","transactions","setTransactions","hasMore","setHasMore","nextPage","setNextPage","fetchById","employeeId","response","page","prevTransactions","length","prevPage","invalidateData","data"],"sources":["C:/Users/waltw/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { Transaction } from \"../utils/types\";\nimport { TransactionsByEmployeeResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [transactions, setTransactions] = useState<Transaction[] | null>(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextPage, setNextPage] = useState(0);\n\n  const fetchById = useCallback(async (employeeId: string) => {\n    if (!hasMore) return; // Prevent fetching if no more data is available\n\n    const response = await fetchWithCache<Transaction[], { employeeId: string; page: number }>(\n      \"transactionsByEmployee\",\n      {\n        employeeId,\n        page: nextPage,\n      }\n    );\n\n    setTransactions((prevTransactions) => {\n      if (response === null || response.length === 0) {\n        setHasMore(false); // No more transactions to load\n        return prevTransactions;\n      }\n\n      setNextPage((prevPage) => prevPage + 1); // Increment the page number for the next fetch\n      return [...(prevTransactions || []), ...response];\n    });\n\n    if (response?.length === 0) {\n      setHasMore(false); // No more transactions to load\n    }\n  }, [fetchWithCache, hasMore, nextPage]);\n\n  const invalidateData = useCallback(() => {\n    setTransactions(null);\n    setHasMore(true);\n    setNextPage(0); // Reset the page number when invalidating data\n  }, []);\n\n  return { data: transactions, loading, fetchById, invalidateData, hasMore };\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,yBAAyBA,CAAA,EAAiC;EAAAC,EAAA;EACxE,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAuB,IAAI,CAAC;EAC5E,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMY,SAAS,GAAGb,WAAW,CAAC,MAAOc,UAAkB,IAAK;IAC1D,IAAI,CAACL,OAAO,EAAE,OAAO,CAAC;;IAEtB,MAAMM,QAAQ,GAAG,MAAMV,cAAc,CACnC,wBAAwB,EACxB;MACES,UAAU;MACVE,IAAI,EAAEL;IACR,CACF,CAAC;IAEDH,eAAe,CAAES,gBAAgB,IAAK;MACpC,IAAIF,QAAQ,KAAK,IAAI,IAAIA,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;QAC9CR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACnB,OAAOO,gBAAgB;MACzB;MAEAL,WAAW,CAAEO,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;MACzC,OAAO,CAAC,IAAIF,gBAAgB,IAAI,EAAE,CAAC,EAAE,GAAGF,QAAQ,CAAC;IACnD,CAAC,CAAC;IAEF,IAAI,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,MAAK,CAAC,EAAE;MAC1BR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC,EAAE,CAACL,cAAc,EAAEI,OAAO,EAAEE,QAAQ,CAAC,CAAC;EAEvC,MAAMS,cAAc,GAAGpB,WAAW,CAAC,MAAM;IACvCQ,eAAe,CAAC,IAAI,CAAC;IACrBE,UAAU,CAAC,IAAI,CAAC;IAChBE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAES,IAAI,EAAEd,YAAY;IAAED,OAAO;IAAEO,SAAS;IAAEO,cAAc;IAAEX;EAAQ,CAAC;AAC5E;AAACL,EAAA,CAvCeD,yBAAyB;EAAA,QACHD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}