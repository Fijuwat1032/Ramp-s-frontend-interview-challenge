{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\waltw\\\\Downloads\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    hasMore,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(EMPTY_EMPLOYEE);\n  const transactions = useMemo(() => {\n    var _paginatedTransaction;\n    if (selectedEmployee && selectedEmployee.id !== EMPTY_EMPLOYEE.id) {\n      return transactionsByEmployee !== null && transactionsByEmployee !== void 0 ? transactionsByEmployee : [];\n    }\n    return (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : [];\n  }, [paginatedTransactions, transactionsByEmployee, selectedEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    try {\n      await employeeUtils.fetchAll();\n      await paginatedTransactionsUtils.fetchAll();\n    } finally {\n      setIsLoading(false);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const handleEmployeeChange = useCallback(async newEmployee => {\n    if (newEmployee === null) return;\n    setSelectedEmployee(newEmployee);\n    if (newEmployee.id === EMPTY_EMPLOYEE.id) {\n      // Reset to show all transactions\n      await loadAllTransactions();\n    } else {\n      // Filter transactions by the selected employee\n      await loadTransactionsByEmployee(newEmployee.id);\n    }\n  }, [loadAllTransactions, loadTransactionsByEmployee]);\n  const handleViewMore = useCallback(async () => {\n    if (selectedEmployee && selectedEmployee.id !== EMPTY_EMPLOYEE.id) {\n      await loadTransactionsByEmployee(selectedEmployee.id);\n    } else {\n      await loadAllTransactions();\n    }\n  }, [loadAllTransactions, loadTransactionsByEmployee, selectedEmployee]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: selectedEmployee,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), transactions.length > 0 && hasMore && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), !hasMore && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No more transactions to load.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O3s1n5/lrGhmr7NkEjn2FTIqwRc=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","hasMore","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","selectedEmployee","setSelectedEmployee","transactions","_paginatedTransaction","id","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","handleEmployeeChange","newEmployee","handleViewMore","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","length","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/waltw/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, hasMore, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(EMPTY_EMPLOYEE);\n\n  const transactions = useMemo(() => {\n    if (selectedEmployee && selectedEmployee.id !== EMPTY_EMPLOYEE.id) {\n      return transactionsByEmployee ?? [];\n    }\n    return paginatedTransactions?.data ?? [];\n  }, [paginatedTransactions, transactionsByEmployee, selectedEmployee]);\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    try {\n      await employeeUtils.fetchAll();\n      await paginatedTransactionsUtils.fetchAll();\n    } finally {\n      setIsLoading(false);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  const handleEmployeeChange = useCallback(\n    async (newEmployee: Employee | null) => {\n      if (newEmployee === null) return;\n\n      setSelectedEmployee(newEmployee);\n\n      if (newEmployee.id === EMPTY_EMPLOYEE.id) {\n        // Reset to show all transactions\n        await loadAllTransactions();\n      } else {\n        // Filter transactions by the selected employee\n        await loadTransactionsByEmployee(newEmployee.id);\n      }\n    },\n    [loadAllTransactions, loadTransactionsByEmployee]\n  );\n\n  const handleViewMore = useCallback(async () => {\n    if (selectedEmployee && selectedEmployee.id !== EMPTY_EMPLOYEE.id) {\n      await loadTransactionsByEmployee(selectedEmployee.id);\n    } else {\n      await loadAllTransactions();\n    }\n  }, [loadAllTransactions, loadTransactionsByEmployee, selectedEmployee]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={selectedEmployee}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions.length > 0 && hasMore && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n\n          {!hasMore && (\n            <p>No more transactions to load.</p>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}